/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/* 
 * File:   main.cpp
 * Author: snir2g1
 *
 * Created on 14 février 2022, 16:17/
 */

#include <cstdlib>
#include <iostream>
#include "./defs/serialib.h"
#include "../CameraPhoto/defs/CameraPhoto.h"
#define MAX_DIGITS 10
#include<sstream>
#include <fstream>
#include <string>

using namespace std;

/*
 * 
 */
int main() {
    
    CameraPhoto* laCamera = new CameraPhoto();

    char monTableau[JPEG_BUF_SIZE];

    laCamera->activer();

    laCamera->prendrePhoto();

    laCamera->desactiver();

    laCamera->getPhoto(monTableau);//on utilise mon tableau qui est un tableau de char dans lequel la photo est stocké 

    int taille = laCamera->getTaille();
    
        //dans le cas ou chiffre=taille 

    string lettre; 
    ostringstream lettreAvecChiffre;
    string valeur;
    ostringstream valeurAvecTaille;

    lettreAvecChiffre  <<  taille ;     // ici on transforme taille en lettreAvecChiffre 

   lettre = lettreAvecChiffre.str(); //  ici on transforme lettre avecChiffre en lettre (conversion en string)
   
    // creeation d'un tableau char nommé dest de taille "6"
    char dest[6];

    // copie le contenu de lettre dans dest     
    strcpy(dest, lettre.c_str()); // conersion en string en meme temps de la copie

    cout << dest; //on affiche le contenu de dest (on utilise << car on manipule des flux)

    // cette convertion a été faite car la trame d'entete est codé en ascii 
    
    int reste = taille / 98;
    reste = taille - (taille / 98)*98; // cela va nous donner le nombre d'octets de la derniere trame qui s'apelle reste 
    valeurAvecTaille << reste; //  reste est transformé en valeurAvecTaille (<< car on utilise des flux )
    valeur = valeurAvecTaille.str(); //on attribut la valeur de ValeurAvecTaille a valeur 
    char rest[5];
    strcpy(rest, valeur.c_str());// on copie le contenue de valeur pou le mettre dans rest qui est un tab char 
    
    
    bool finish = false;
    short Checksum = 0;
    char leChecksum[2];
    int indiceEnCours;
    char trameEmission[100];
    serialib toto;
    char commande [128];
    commande[0]= 1;
    commande[1]= 21;
    commande[2]= 'M';
    commande[3]= 'E';
    commande[4]= 'A';
    commande[5]= 'S';
    commande[6]= 'U';
    commande[7]= 'R';
    commande[8]= 'E';
    commande[9]= '-';
    commande[10]= 'I';
    commande[11]= 'M';
    commande[12]= 'G';
    commande[13]= ' ';

    for (int i = 0; i < lettre.size(); i++) {   // letre.size = taille de la chaine de caractere qui correspond a la taille du nombre d'octets de l'image  

        commande[14 + i] = dest[i];// dst correspond a la transformation de lettre qui etait un string en dest qui est maintenant un tableau de char 
    }

    commande [14 + lettre.size()] = ' ';    // tout ce qui sera apres la case 14 correspondra au nombre d'octets de la trame 

    for (int i = 0; i < valeur.size(); i++) {

        commande[14 + lettre.size() + i + 1] = rest[i];//rest[i] correspond a la derniere trame qui va contenir le nb d'octets de la derniere trame
    }

    for (int i = 0; i < commande[1] + 2; i++) {
        Checksum = Checksum^commande[i];
    }
    sprintf(leChecksum, "%2X", Checksum); //debut du calcul du cheksum
    if (leChecksum[0] == 32) leChecksum[0] = '0';
    if (leChecksum[1] == 32) leChecksum[1] = '0';
    commande [14 + lettre.size() + valeur.size() + 2] = leChecksum[0];
    commande [14 + lettre.size() + valeur.size() + 3] = leChecksum[1];  // calcul du ckesum tel qu'il etait lannée derniere
    commande [14 + lettre.size() + valeur.size() + 4] = 255;

    int retour = toto.Open("/dev/serial0", 9600);
    toto.Write(commande, 14 + lettre.size() + valeur.size()  + 5);
    usleep(500000);


    indiceEnCours = 0;
    int i;

    do {
        for (i = indiceEnCours; i < indiceEnCours + 98; i++) {
            trameEmission[i - indiceEnCours] = monTableau[i];   // 1er octet de la trame suivante (pour se reperer dans le tableau)
        } // colonne tableau concérnée
        indiceEnCours = i ; // incrémentation de la colonne 

        Checksum = 0;
        for (i = 0; i < trameEmission[1] + 2; i++) { //
            Checksum = Checksum^trameEmission[i]; // checksum du trameEmission concerné
        }
        sprintf(leChecksum, "%2X", Checksum);
        if (leChecksum[0] == 32) leChecksum[0] = '0'; // si il y a un espace (32 en ascii) il faut le rempalacr par 0
        if (leChecksum[1] == 32) leChecksum[1] = '0'; // si il y a un espace (32 en ascii) il faut le rempalacr par 0
        trameEmission [98] = leChecksum[0]; // la colonne 0 de "lecheksum" correspond a la colonne 98 de "TrameEmission"
        trameEmission [99] = leChecksum[1]; // la colonne 1 de "lecheksum" correspond a la colonne 99 de "TrameEmission"
        

        toto.Write(trameEmission, 100); // l'objet toto envoir trame emission de la taille 100 dans le canal serial
       
        usleep(500000);

    } while (indiceEnCours < taille - 98); // taille de l'image - nombre d'octets de données de la trame standart


    for (i = indiceEnCours; i < taille; i++) {
            trameEmission[i - indiceEnCours] = monTableau[i];
        } // colonne tableau concérnée

    Checksum = 0;
    for (int i = 0; i < trameEmission[1] + 2; i++) {
        Checksum = Checksum^trameEmission[i];
    }
    sprintf(leChecksum, "%2X", Checksum);//transformer au format ascii 
    if (leChecksum[0] == 32) leChecksum[0] = '0';//transformer au format ascii 
    if (leChecksum[1] == 32) leChecksum[1] = '0';//transformer au format ascii 
    trameEmission [reste] = leChecksum[0];// reste  correspond au nombre d'octets de la derniere trame,
                                         //ce qui a ete calculé par le cheksum on l emet dans reste 
    trameEmission [reste + 1] = leChecksum[1]; // ce qui a ete calculé par le cheksum on l emet dans reste + 1
    toto.Write(trameEmission, reste + 2); // on envoie sur le port serie trameemission et le reste +2 qui 
                                        //correspond au nombre ocets de derniere trame + les 2 octets de checksum 
    usleep(500000); // temps de pause entre chaque trame ( 500 microsecondes )

    return 0;


}  

 

